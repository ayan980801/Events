name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend tests and build
  backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: chatbot_password
          POSTGRES_USER: chatbot_user
          POSTGRES_DB: chatbot_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: chatbot_user
          MONGO_INITDB_ROOT_PASSWORD: chatbot_password
          MONGO_INITDB_DATABASE: chatbot_history
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    defaults:
      run:
        working-directory: ./backend

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm run test
      env:
        DATABASE_URL: postgresql://chatbot_user:chatbot_password@localhost:5432/chatbot_db
        MONGODB_URL: mongodb://chatbot_user:chatbot_password@localhost:27017/chatbot_history
        JWT_SECRET: test-jwt-secret
    
    - name: Run e2e tests
      run: npm run test:e2e
      env:
        DATABASE_URL: postgresql://chatbot_user:chatbot_password@localhost:5432/chatbot_db
        MONGODB_URL: mongodb://chatbot_user:chatbot_password@localhost:27017/chatbot_history
        JWT_SECRET: test-jwt-secret
    
    - name: Build backend
      run: npm run build

  # Frontend tests and build
  frontend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./mobile-app

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.9'
        channel: 'stable'
    
    - name: Flutter doctor
      run: flutter doctor -v
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run analyzer
      run: flutter analyze
    
    - name: Run tests
      run: flutter test
    
    - name: Build APK
      run: flutter build apk --debug

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and push Docker images (only on main branch)
  docker:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.dev
        push: true
        tags: ghcr.io/${{ github.repository }}/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max